#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(shinyWidgets)
library(dplyr)
library(ggplot2)
library(plotly)

#Loading and processing the data set
train.dacon <- read.csv("train.csv")
aggregated.train.data <- train.dacon[order(train.dacon [["days_of_week"]], decreasing=FALSE, na.last=TRUE),]


days.of.week <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" )
holidays <- c("Regular Day", "Holiday")

for (i in 1:7 ) {aggregated.train.data[aggregated.train.data$days_of_week==(i-1),]$days_of_week  <- (days.of.week[i])}
for (i in 1:2 ) {aggregated.train.data[aggregated.train.data$holyday==(i-1),]$holyday  <- (holidays[i])}


aggregated.train.data$days_of_week <- factor(aggregated.train.data$days_of_week, levels=c("Sunday", "Monday", 
                                                                                          "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday") )
#Creating the components of the Shiny App. 
ui <- shinyUI(fluidPage(
  setBackgroundColor(
    color = c("#F7FBFF", "#2171B5"),
    gradient = "linear",
    direction = "bottom"
  ),
  
  # App title ----
  titlePanel("Transaction Trends"),
  
  # Sidebar layout with input and output definitions ----
  sidebarLayout( fluid=TRUE,
                 
                 # Sidebar panel for inputs ----
                 sidebarPanel(
                   
                   # Input: Slider for the number of bins ----
                   
                   
                   selectInput(inputId = "days_of_week",
                               label = "Select the Day(s) of the Week of Interest:",
                               choices = unique(aggregated.train.data$days_of_week), multiple= TRUE, selected=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" )),
                   
                   selectInput(inputId = "holyday",
                               label = "Public Holiday and/or Regular Days:",
                               choices = unique(aggregated.train.data$holyday), multiple= TRUE, selected=c("Holiday", "Regular Day"))
                   
                 ),
                 
                 # Main panel for displaying outputs ----
                 mainPanel(  
                   tabsetPanel(
                     
                     # Output: Histogram ----
                     tabPanel("Visualisation: Amount by Date", plotlyOutput(outputId = "plot1", height = "1200px", width = "1600px")),
                     tabPanel("Visualisation: Amount by Time", plotlyOutput(outputId = "plot2", height = "1200px", width = "1600px")),
                     tabPanel("Visualisation: Amount by Weekday", plotlyOutput(outputId = "plot3", height = "1200px", width = "1600px")),
                     tabPanel("Visualisation: Regular day vs Public Holiday", plotlyOutput(outputId = "plot4", height = "1200px", width = "1600px")),
                     tabPanel("Table", dataTableOutput("table")),
                     tabPanel("Summary", verbatimTextOutput("summary") ))
                   # plotOutput(outputId = "plot2", height = "800px", width = "700px")
                 )
  )
)
)

server <- shinyServer(function(input, output) {
  
  
  plot1.1 <-  reactive ({ 
    
    
    dat <- aggregated.train.data %>%
      filter(days_of_week %in% input$days_of_week ) %>%
      filter(holyday  %in% input$holyday) 
    
    ag.date.amt2<- aggregate(amount~date+holyday, data=dat, FUN= sum)
    
    plot_ly(x=ag.date.amt2$date, y=ag.date.amt2$amount, color = ~ag.date.amt2$holyday, 
            colors=c( "#CC6633","#009999"), type= "scatter", mode = "line", showlegend=F) %>% 
      rangeslider(thickness= 0.1) %>%  
      layout(xaxis=list(title="Transaction Date" ), yaxis=list(title="Total Amount"), title = "Total Amount by Transaction Date",  grid=T)
  })
  
  plot1.2 <-  reactive ({ 
    
    dat <- aggregated.train.data %>%
      filter(days_of_week %in% input$days_of_week ) %>%
      filter(holyday  %in% input$holyday) 
    
    ag.date.amt2 <- aggregate(amount~date+holyday, data=dat, FUN= sum)
    
    plot_ly(x=ag.date.amt2$date, y=ag.date.amt2$amount, color = ~ag.date.amt2$holyday,colors=c("#CC6633","#009999")) %>% 
      add_bars() %>% rangeslider(thickness = 0.1) %>%  
      layout(xaxis=list(title="Transaction Date" ), yaxis=list(title="Total Amount"), title = "Total Amount by Transaction Date", grid=T)
  })
  
  
  output$plot1 =renderPlotly({ subplot(
    plot1.2(),
    plot1.1(), heights=1, which_layout = 1, margin=0.05
  )
  })    
  
  #Plot 2
  
  
  output$plot2 <-  renderPlotly({ 
    dat <- aggregated.train.data%>%
      filter(days_of_week %in% input$days_of_week ) %>%
      filter(holyday  %in% input$holyday) 
    
    time.time <-lubridate::hms(train.dacon$time)
    ag.time.amt <- aggregate(amount~time+holyday, FUN= sum, data=dat)
    
    plot_ly(data= ag.time.amt , x=ag.time.amt$time, y=ag.time.amt$amount ) %>% 
      add_bars(color = ~ag.time.amt$holyday, colors = c("#CC6633","#009999")) %>% rangeslider() %>% 
      layout(xaxis=list(title="Transaction Time" ), yaxis=list(title="Total Amount"), title = "Total Amount by Transaction Time",  grid=T)  })
  
  # Plot 3
  
  output$plot3 <- renderPlotly({ 
    dat <- aggregated.train.data %>%
      filter(days_of_week %in% input$days_of_week ) %>%
      filter(holyday  %in% input$holyday) 
    ag.weekday.amt <- aggregate(amount~days_of_week, data=dat, FUN= sum)
    
    plot_ly(x=ag.weekday.amt$days_of_week, y=ag.weekday.amt$amount, color=~ag.weekday.amt$days_of_week) %>% 
      add_bars() %>% rangeslider() %>% 
      layout (xaxis= list(title="Day of the Week"), yaxis= list(title="Total Amount"), title ="Total Amount by Day of the Week",  grid=T)  })
  
  
  output$plot4 <- renderPlotly({ 
    
    dat <- aggregated.train.data %>%
      filter(days_of_week %in% input$days_of_week ) %>%
      filter(holyday  %in% input$holyday) 
    ag.weekday.amt1 <- aggregate(amount~days_of_week+holyday, data=dat, FUN= sum)
    
    ggplot(data =ag.weekday.amt1, mapping = aes(x = days_of_week, fill = holyday, 
                                                y = ifelse(test = (holyday == "Holiday"), yes =  -amount, no = amount))) + 
      geom_bar(stat = "identity") + labs(title="Total Amounts: Holidays vs Regular Days") + 
      xlab("Weekday") + ylab("Total Amount") + coord_flip() +  
      
      guides(fill=guide_legend(title="Type of Day"))
  })
  
  
  
  #Table & Summary
  output$table <- renderDataTable({aggregated.train.data});
  output$summary <- renderPrint({summary(aggregated.train.data)})   
  
}
)

# Running Shiny app ----
shinyApp(ui = ui, server = server)
  
